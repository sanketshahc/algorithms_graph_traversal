import randgraph
import shortest_path
import graph_adjacency_list
import graph_edge_list

graph_a = graph_adjacency_list.Graph()
graph_b = graph_edge_list.Graph()

x = randgraph.rand_graph()

graph_a.graph = x[0]
graph_b.graph = x[1]

print(shortest_path.shortest_path(graph_a,'r','j'))
print(shortest_path.shortest_path(graph_a,'d','e'))
print(shortest_path.shortest_path(graph_a,'b','r'))
print(shortest_path.shortest_path(graph_a,'l','z'))
print(shortest_path.shortest_path(graph_a,'a','x'))


nodelist = {
    "a": [('b', 20), ('c', 9), ('f', 6)],
    'b': [('a', 2), ('c', 13), ('d', 16), ('g', 9)],
    'c': [('d', 15), ('g', 1)],
    'd': [('b', 12), ('c', 1), ('e', 10), ('f', 3)],
    'e': [('f', 9), ('g', 12), ('h', 9), ('i', 14), ('k', 19)],
    'f': [('e', 5), ('h', 5), ('i', 10), ('l', 14)],
    'g': [('e', 20), ('h', 6), ('i', 18), ('j', 15), ('k', 10), ('m', 2)],
    'h': [('f', 7), ('l', 13), ('m', 8)],
    'i': [('e', 7), ('g', 1), ('l', 12), ('m', 20)],
    'j': [('i', 16), ('m', 2)],
    'k': [('o', 20), ('r', 1)],
    'l': [('o', 6), ('p', 20), ('r', 17), ('s', 8)],
    'm': [('q', 14), ('r', 3)],
    'n': [('m', 19), ('p', 14), ('r', 15)],
    'o': [('p', 13), ('q', 11), ('r', 19), ('s', 6)],
    'p': [('u', 12), ('v', 19), ('w', 14), ('x', 4)],
    'q': [('p', 14), ('r', 3), ('u', 5), ('v', 9), ('w', 17), ('y', 20), ('z', 16)],
    'r': [('s', 11), ('u', 2), ('w', 16), ('x', 9), ('z', 9)],
    's': [('t', 12), ('u', 19), ('w', 5), ('z', 11)],
    't': [('q', 6), ('r', 10), ('s', 7), ('w', 13), ('x', 7), ('y', 6)],
    'u': [('p', 7), ('q', 13), ('r', 1), ('s', 12), ('t', 12), ('x', 10), ('y', 19)],
    'v': [('q', 9), ('s', 13), ('t', 20), ('y', 16)],
    'w': [('q', 16), ('t', 15), ('x', 18), ('y', 5)],
    'x': [('p', 20), ('q', 12), ('t', 11), ('u', 2), ('v', 5), ('w', 8), ('z', 18)],
    'y': [('p', 8), ('q', 19), ('s', 15), ('v', 15), ('z', 5)],
    'z': [('p', 16), ('q', 15), ('r', 14), ('s', 6), ('t', 5), ('u', 17), ('x', 10), ('y', 2)]
}
edgelist = [('a', 'b', 20), ('a', 'c', 9), ('a', 'f', 6), ('b', 'a', 2), ('b', 'c', 13),
            ('b', 'd', 16),
            ('b', 'g', 9), ('c', 'd', 15), ('c', 'g', 1), ('d', 'b', 12), ('d', 'c', 1),
            ('d', 'e', 10),
            ('d', 'f', 3), ('e', 'f', 9), ('e', 'g', 12), ('e', 'h', 9), ('e', 'i', 14),
            ('e', 'k', 19),
            ('f', 'e', 5), ('f', 'h', 5), ('f', 'i', 10), ('f', 'l', 14), ('g', 'e', 20),
            ('g', 'h', 6),
            ('g', 'i', 18), ('g', 'j', 15), ('g', 'k', 10), ('g', 'm', 2), ('h', 'f', 7),
            ('h', 'l', 13),
            ('h', 'm', 8), ('i', 'e', 7), ('i', 'g', 1), ('i', 'l', 12), ('i', 'm', 20),
            ('j', 'i', 16),
            ('j', 'm', 2), ('k', 'o', 20), ('k', 'r', 1), ('l', 'o', 6), ('l', 'p', 20),
            ('l', 'r', 17),
            ('l', 's', 8), ('m', 'q', 14), ('m', 'r', 3), ('n', 'm', 19), ('n', 'p', 14),
            ('n', 'r', 15),
            ('o', 'p', 13), ('o', 'q', 11), ('o', 'r', 19), ('o', 's', 6), ('p', 'u', 12),
            ('p', 'v', 19), ('p', 'w', 14), ('p', 'x', 4), ('q', 'p', 14), ('q', 'r', 3),
            ('q', 'u', 5),
            ('q', 'v', 9), ('q', 'w', 17), ('q', 'y', 20), ('q', 'z', 16), ('r', 's', 11),
            ('r', 'u', 2),
            ('r', 'w', 16), ('r', 'x', 9), ('r', 'z', 9), ('s', 't', 12), ('s', 'u', 19),
            ('s', 'w', 5),
            ('s', 'z', 11), ('t', 'q', 6), ('t', 'r', 10), ('t', 's', 7), ('t', 'w', 13),
            ('t', 'x', 7),
            ('t', 'y', 6), ('u', 'p', 7), ('u', 'q', 13), ('u', 'r', 1), ('u', 's', 12),
            ('u', 't', 12),
            ('u', 'x', 10), ('u', 'y', 19), ('v', 'q', 9), ('v', 's', 13), ('v', 't', 20),
            ('v', 'y', 16), ('w', 'q', 16), ('w', 't', 15), ('w', 'x', 18), ('w', 'y', 5),
            ('x', 'p', 20), ('x', 'q', 12), ('x', 't', 11), ('x', 'u', 2), ('x', 'v', 5),
            ('x', 'w', 8),
            ('x', 'z', 18), ('y', 'p', 8), ('y', 'q', 19), ('y', 's', 15), ('y', 'v', 15),
            ('y', 'z', 5),
            ('z', 'p', 16), ('z', 'q', 15), ('z', 'r', 14), ('z', 's', 6), ('z', 't', 5),
            ('z', 'u', 17),
            ('z', 'x', 10), ('z', 'y', 2)]
graph_a.graph = nodelist
graph_b.graph = edgelist

print(shortest_path.shortest_path(graph_a,'a','t'))
print(shortest_path.shortest_path(graph_b,'a','t'))

